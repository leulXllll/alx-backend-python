from django.db import models
from django.contrib.auth.models import User
from django.db.models import Prefetch

class Message(models.Model):
    sender = models.ForeignKey(User, related_name='sent_messages', on_delete=models.CASCADE)
    receiver = models.ForeignKey(User, related_name='received_messages', on_delete=models.CASCADE)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    edited = models.BooleanField(default=False)
    edited_at = models.DateTimeField(null=True, blank=True)
    edited_by = models.ForeignKey(User, null=True, blank=True, on_delete=models.SET_NULL, related_name='edited_messages')
    
    # ðŸ§© For threaded replies
    parent_message = models.ForeignKey('self', null=True, blank=True, on_delete=models.CASCADE, related_name='replies')

    def __str__(self):
        return f"{self.sender} to {self.receiver}: {self.content[:30]}"

    def get_thread(self):
        """
        Recursively fetch all replies to this message.
        """
        thread = []

        def fetch_replies(message):
            replies = message.replies.all()
            for reply in replies:
                thread.append(reply)
                fetch_replies(reply)

        fetch_replies(self)
        return thread

    @staticmethod
    def fetch_conversation_with_replies(user):
        """
        Efficiently fetch all messages in user's conversations including replies.
        """
        return Message.objects.filter(receiver=user).select_related(
            'sender', 'receiver', 'parent_message'
        ).prefetch_related(
            Prefetch('replies', queryset=Message.objects.all().select_related('sender', 'receiver'))
        ).order_by('timestamp')


class MessageHistory(models.Model):
    message = models.ForeignKey(Message, on_delete=models.CASCADE, related_name='history')
    old_content = models.TextField()
    edited_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"History for Message ID {self.message.id}"
